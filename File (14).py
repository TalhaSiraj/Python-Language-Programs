{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Starting City : \n",
      "Pitesti\n",
      "Enter Destination City : \n",
      "Neamt\n",
      "\n",
      "****************************************************\n",
      "Breadth First Search :\n",
      "Destination City Has Been Located.\n",
      "Visited Cities Are :  ['Pitesti', 'Bucharest', 'Giurgiu', 'Urziciceni', 'Hirsova', 'Vaslui', 'Eforie', 'Iasi', 'Neamt']\n",
      "Path Cost Is :  781\n",
      "\n",
      "****************************************************\n",
      "Greedy Best First Search:\n",
      "Parent :  Pitesti\n",
      "Parent :  Bucharest\n",
      "Parent :  Giurgiu\n"
     ]
    }
   ],
   "source": [
    "from collections import defaultdict\n",
    "\n",
    "class Main:\n",
    "    def __init__(self):\n",
    "        self.temp = []\n",
    "        self.add_path = []\n",
    "        self.array_AB = defaultdict(lambda: defaultdict(list))\n",
    "        self.array_GBFS_values = defaultdict()\n",
    "    def find_child(self, node1):\n",
    "        child_list = []\n",
    "        for child in self.array_AB[node1]:\n",
    "            child_list.append(child)\n",
    "        return child_list\n",
    "    def creating_links(self, node1, node2, pathcost):\n",
    "        self.array_AB[node1][node2] = [pathcost]\n",
    "    def saving_cost(self, node1, node2):\n",
    "        cost = self.Find_path_cost(node1, node2)\n",
    "        self.add_path.append(cost[0])\n",
    "    def Find_path_cost(self, node1, node2):\n",
    "        return self.array_AB[node1][node2]\n",
    "    def set_direct_heuristics_values(self, node, value):\n",
    "        self.array_GBFS_values[node] = value\n",
    "    def Return_value(self, node_name):\n",
    "        return self.array_GBFS_values[node_name]\n",
    "    def Agorithm(self, code):\n",
    "        print(\"Enter Starting City : \")\n",
    "        self.starting_node = input()\n",
    "        if self.temp.__contains__(self.starting_node):\n",
    "            print(\"Enter Destination City : \")\n",
    "            self.goal_node = input()\n",
    "            if self.temp.__contains__(self.goal_node):\n",
    "                if (code == \"START\"):\n",
    "                    print(\"\\n****************************************************\")\n",
    "                    print(\"Breadth First Search :\")\n",
    "                    self.BFS(self.starting_node, self.goal_node)\n",
    "                    print(\"\\n****************************************************\")\n",
    "                    print(\"Greedy Best First Search:\")\n",
    "                    self.GBFS(self.starting_node, self.goal_node)\n",
    "                else:\n",
    "                    print(\"Cheak Your Input.\")\n",
    "            else:\n",
    "                print(\"Cheak Your Input.\")\n",
    "            \n",
    "    def BFS(self, starting_node, goal_node):\n",
    "        self.visited = []\n",
    "        self.queue   = []\n",
    "        self.queue.append(starting_node)\n",
    "        count = 0\n",
    "        while (self.queue):\n",
    "            parent = self.queue.pop(0)\n",
    "            if (self.visited.__contains__(parent)):\n",
    "                None\n",
    "            else:\n",
    "                self.visited.append(parent)\n",
    "                if (parent == goal_node):\n",
    "                    print(\"Destination City Has Been Located.\")\n",
    "                    print(\"Visited Cities Are : \", self.visited)\n",
    "                    if (count == 0):\n",
    "                        print(\"Path Cost Is '0' Beacuse It Is The Starting City.\")\n",
    "                        break;\n",
    "                    else:\n",
    "                        print(\"Path Cost Is : \", sum(self.add_path[0:(len(self.visited)) - 1]))\n",
    "                        break;\n",
    "                else:\n",
    "                    child_list = self.find_child(parent)\n",
    "                    for x in child_list:\n",
    "                        self.queue.append(x)\n",
    "                        if (self.visited.__contains__(x)):\n",
    "                            print()\n",
    "                        else:\n",
    "                            self.saving_cost(parent, x)\n",
    "                    count = count + 1\n",
    "\n",
    "    def GBFS(self, starting_node, goal_node):\n",
    "        self.visited = []\n",
    "        self.queue = []\n",
    "        self.value = []\n",
    "        self.queue.append(starting_node)\n",
    "        count = 0\n",
    "        while (self.queue):\n",
    "            parent = self.queue.pop(0)\n",
    "            print(\"Parent : \",parent)\n",
    "            self.queue.clear()\n",
    "            self.value.clear()\n",
    "            if (self.visited.__contains__(parent)):\n",
    "                None\n",
    "            else:\n",
    "                self.visited.append(parent)\n",
    "                if (count > 0):\n",
    "                    self.saving_cost(self.visited[count - 1], parent)\n",
    "                if (parent == goal_node):\n",
    "                    print(\"Destination City Has Been Located.\")\n",
    "                    print(\"Visited Cities Are : \", self.visited)\n",
    "                    print(\"Heuristics Are : \", self.array_GBFS_values)\n",
    "                    if (count == 0):\n",
    "                        print(\"Path Cost Is '0' Beacuse It Is The Starting City.\")\n",
    "                        break;\n",
    "                    else:\n",
    "                        print(\"Path Cost Is : \", sum(self.add_path[0:(len(self.visited)) - 1]))\n",
    "                        break;\n",
    "                else:\n",
    "                    child_list = self.find_child(parent)\n",
    "                    for x in child_list:\n",
    "                        self.queue.append(x)\n",
    "                        self.value.append(self.Return_value(x))\n",
    "                    if (0 < len(self.queue)):\n",
    "                        self.val1 = 0\n",
    "                        self.val2 = 0\n",
    "                        i = 0\n",
    "                        while (i < len(self.queue)):\n",
    "                            j = 1\n",
    "                            while (j < len(self.queue)):\n",
    "                                if (self.value[i] > self.value[j]):\n",
    "                                    self.val1 = self.value[i]\n",
    "                                    self.val2 = self.value[j]\n",
    "                                    self.value.remove(self.val1)\n",
    "                                    self.value.remove(self.val2)\n",
    "                                    self.value.insert(i, self.val2)\n",
    "                                    self.value.insert(j, self.val1)\n",
    "                                    self.val1 = 0\n",
    "                                    self.val2 = 0\n",
    "                                    self.val1 = self.queue[i]\n",
    "                                    self.val2 = self.queue[j]\n",
    "                                    self.queue.remove(self.val1)\n",
    "                                    self.queue.remove(self.val2)\n",
    "                                    self.queue.insert(i, self.val2)\n",
    "                                    self.queue.insert(j, self.val1)\n",
    "                                j = j + 1\n",
    "                            i = i + 1\n",
    "                    count = count + 1\n",
    "                    \n",
    "obj1 = Main()\n",
    "obj1.temp.append(\"Arad\")\n",
    "obj1.temp.append(\"Bucharest\")\n",
    "obj1.temp.append(\"Craiova\")\n",
    "obj1.temp.append(\"Dobreta\")\n",
    "obj1.temp.append(\"Eforie\")\n",
    "obj1.temp.append(\"Fagaras\")\n",
    "obj1.temp.append(\"Giurgiu\")\n",
    "obj1.temp.append(\"Hirsova\")\n",
    "obj1.temp.append(\"Iasi\")\n",
    "obj1.temp.append(\"lugoj\")\n",
    "obj1.temp.append(\"Mehadia\")\n",
    "obj1.temp.append(\"Neamt\")\n",
    "obj1.temp.append(\"Oradea\")\n",
    "obj1.temp.append(\"Pitesti\")\n",
    "obj1.temp.append(\"RimnicuVilcea\")\n",
    "obj1.temp.append(\"Sibiu\")\n",
    "obj1.temp.append(\"Timisoara\")\n",
    "obj1.temp.append(\"Urziciceni\")\n",
    "obj1.temp.append(\"Vaslui\")\n",
    "obj1.temp.append(\"Zerind\")\n",
    "obj1.array_GBFS_values[\"Arad\"] = 366\n",
    "obj1.array_GBFS_values[\"Bucharest\"] = 0\n",
    "obj1.array_GBFS_values[\"Craiova\"] = 160\n",
    "obj1.array_GBFS_values[\"Dobreta\"] = 242\n",
    "obj1.array_GBFS_values[\"Eforie\"] = 161\n",
    "obj1.array_GBFS_values[\"Fagaras\"] = 178\n",
    "obj1.array_GBFS_values[\"Giurgiu\"] = 77\n",
    "obj1.array_GBFS_values[\"Hirsova\"] = 151\n",
    "obj1.array_GBFS_values[\"Iasi\"] = 226\n",
    "obj1.array_GBFS_values[\"lugoj\"] = 242\n",
    "obj1.array_GBFS_values[\"Mehadia\"] = 241\n",
    "obj1.array_GBFS_values[\"Neamt\"] = 234\n",
    "obj1.array_GBFS_values[\"Oradea\"] = 380\n",
    "obj1.array_GBFS_values[\"Pitesti\"] = 98\n",
    "obj1.array_GBFS_values[\"RimnicuVilcea\"] = 234\n",
    "obj1.array_GBFS_values[\"Sibiu\"] = 253\n",
    "obj1.array_GBFS_values[\"Timisoara\"] = 329\n",
    "obj1.array_GBFS_values[\"Urziciceni\"] = 80\n",
    "obj1.array_GBFS_values[\"Vaslui\"] = 199\n",
    "obj1.array_GBFS_values[\"Zerind\"] = 374\n",
    "obj1.creating_links(\"Arad\", \"Zerind\", 75)\n",
    "obj1.creating_links(\"Arad\", \"Timisoara\", 118)\n",
    "obj1.creating_links(\"Arad\", \"Sibiu\", 140)\n",
    "obj1.creating_links(\"Zerind\", \"Oradea\", 71)\n",
    "obj1.creating_links(\"Oradea\", \"Sibiu\", 151)\n",
    "obj1.creating_links(\"Timisoara\", \"Lugoj\", 111)\n",
    "obj1.creating_links(\"Lugoj\", \"Mehadia\", 70)\n",
    "obj1.creating_links(\"Mehadia\", \"Dobreta\", 75)\n",
    "obj1.creating_links(\"Dobreta\", \"Craiova\", 120)\n",
    "obj1.creating_links(\"Craiova\", \"RimnicuVilcea\", 80)\n",
    "obj1.creating_links(\"Craiova\", \"Pitesti\", 138)\n",
    "obj1.creating_links(\"RimnicuVilcea\", \"Sibiu\", 80)\n",
    "obj1.creating_links(\"RimnicuVilcea\", \"Pitesti\", 97)\n",
    "obj1.creating_links(\"Pitesti\", \"Bucharest\", 101)\n",
    "obj1.creating_links(\"Sibiu\", \"RimnicuVilcea\", 80)\n",
    "obj1.creating_links(\"Sibiu\", \"Fagaras\", 99)\n",
    "obj1.creating_links(\"Fagaras\", \"Bucharest\", 101)\n",
    "obj1.creating_links(\"Bucharest\", \"Giurgiu\", 90)\n",
    "obj1.creating_links(\"Bucharest\", \"Urziciceni\", 85)\n",
    "obj1.creating_links(\"Urziciceni\", \"Hirsova\", 98)\n",
    "obj1.creating_links(\"Hirsova\", \"Eforie\", 86)\n",
    "obj1.creating_links(\"Urziciceni\", \"Vaslui\", 142)\n",
    "obj1.creating_links(\"Vaslui\", \"Iasi\", 92)\n",
    "obj1.creating_links(\"Iasi\", \"Neamt\", 87)\n",
    "\n",
    "obj1.Agorithm(\"START\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
