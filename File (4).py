{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A Star Search :\n",
      "***************\n",
      "Destination City Optimal Path Is : ['Giurgiu', 'Bucharest', 'Urziceni', 'Vaslui', 'Iasi', 'Neamt']\n"
     ]
    }
   ],
   "source": [
    "class Map:\n",
    "    def __init__(Self, RomaniaMap):\n",
    "        Self.RomaniaMap = RomaniaMap\n",
    "    def NextCity(Self, a):\n",
    "        return Self.RomaniaMap[a]\n",
    "    def AStarSearch(Self, StartCity, StopCity):\n",
    "        CityOpenList = set([StartCity])\n",
    "        CityClosedList = set([])\n",
    "        A = {}\n",
    "        A[StartCity] = 0\n",
    "        Parents = {}\n",
    "        Parents[StartCity] = StartCity\n",
    "        while len(CityOpenList) > 0:\n",
    "            B = None\n",
    "            for City in CityOpenList:\n",
    "                if B == None or A[City] + Self.H(City) < A[B] + Self.H(B):\n",
    "                    B = City;\n",
    "            if B == None:\n",
    "                print('Path does not exist!')\n",
    "                return None\n",
    "            if B == StopCity:\n",
    "                reconst_path = []\n",
    "                while Parents[B] != B:\n",
    "                    reconst_path.append(B)\n",
    "                    B = Parents[B]\n",
    "                reconst_path.append(StartCity)\n",
    "                reconst_path.reverse()\n",
    "                print(\"A Star Search :\")\n",
    "                print(\"***************\")\n",
    "                print('Destination City Optimal Path Is : {}'.format(reconst_path))\n",
    "                return None\n",
    "            for (C, weight) in Self.NextCity(B):\n",
    "                if C not in CityOpenList and C not in CityClosedList:\n",
    "                    CityOpenList.add(C)\n",
    "                    Parents[C] = B\n",
    "                    A[C] = A[B] + weight\n",
    "                else:\n",
    "                    if A[C] > A[B] + weight:\n",
    "                        A[C] = A[B] + weight\n",
    "                        Parents[B] = n\n",
    "                        if C in CityClosedList:\n",
    "                            CityClosedList.remove(C)\n",
    "                            CityOpenList.add(C)\n",
    "            CityOpenList.remove(B)\n",
    "            CityClosedList.add(B)\n",
    "        print(\"A Star Search :\")\n",
    "        print(\"***************\")\n",
    "        print('Destination City Path Does Not Exist!')\n",
    "        return None\n",
    "    def H(Self, B):\n",
    "        Heuristic = {            \n",
    "            'Arad' : 366,\n",
    "            'Bucharest' : 0,\n",
    "            'Craiova' : 160,\n",
    "            'Dobreta' : 242,\n",
    "            'Eforie' : 161,\n",
    "            'Fagaras' : 178,\n",
    "            'Giurgiu' : 77,\n",
    "            'Hirsova' : 151,\n",
    "            'Iasi' : 226,\n",
    "            'Lugoj' : 242,\n",
    "            'Mehadia' : 241,\n",
    "            'Neamt' : 234,\n",
    "            'Oradea' : 380,\n",
    "            'Pitesti' : 98,\n",
    "            'RimnicuVilcea' : 234,\n",
    "            'Sibiu' : 253,\n",
    "            'Timisoara' : 329,\n",
    "            'Urziceni' : 80,\n",
    "            'Vaslui' : 199,\n",
    "            'Zerind' : 374\n",
    "        }\n",
    "        return Heuristic[B]\n",
    "    \n",
    "\n",
    "RomaniaMap = {\n",
    "    'Arad' : [('Zerind', 75),('Timisoara', 118),('Sibiu', 140)],\n",
    "    'Zerind' : [('Oradea', 71),('Arad', 75)],\n",
    "    'Timisoara' : [('Lugoj', 111),('Arad', 118)],\n",
    "    'Oradea' : [('Sibiu', 151),('Zerind', 71)],    \n",
    "    'Lugoj' : [('Mehadia', 70),('Timisoara', 111)],\n",
    "    'Mehadia' : [('Dobreta', 75),('Lugoj', 70)],\n",
    "    'Dobreta' : [('Craiova', 120),('Mehadia', 75)],\n",
    "    'Craiova' : [('RimnicuVilcea', 80),('Dobreta', 120),('Pitesti', 138)],\n",
    "    'RimnicuVilcea' : [('Sibiu', 80),('Pitesti', 97),('Craiova', 80)],\n",
    "    'Sibiu' : [('RimnicuVilcea', 80),('Fagaras', 99)],\n",
    "    'Pitesti' : [('Bucharest', 101),('RimnicuVilcea', 97),('Craiova', 138)],\n",
    "    'Fagaras' : [('Bucharest', 101),('Sibiu', 99)],\n",
    "    'Bucharest' : [('Giurgiu', 90),('Urziceni',85),('Pitesti', 101),('Fagaras', 101)],\n",
    "    'Urziceni' : [('Hirsova', 98),('Vaslui', 142),('Bucharest', 85)],\n",
    "    'Hirsova' : [('Eforie', 86),('Urziceni', 98)],\n",
    "    'Vaslui' : [('Iasi', 92),('Urziceni', 142)],\n",
    "    'Iasi' : [('Neamt', 87),('Vaslui', 92)],\n",
    "    'Eforie' : [('Hirsova', 86)],\n",
    "    'Neamt' : [('Iasi', 87)],\n",
    "    'Giurgiu' : [('Bucharest', 90)]\n",
    "}\n",
    "\n",
    "obj1 = Map(RomaniaMap)\n",
    "obj1.AStarSearch('Giurgiu', 'Neamt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
